/*
 * DxMood
 *
 * This API will allow our frontend JavaScript files to make API calls to display each individual patients and create Notes to tie to each patient 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using DxMood.Data;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class NoteApiController : ControllerBase
    { 
        private readonly DxMoodDbContext _dbContext;

        public NoteApiController(DxMoodDbContext dbContext)
        {
            _dbContext = dbContext;
        }

        /// <summary>
        /// Retrieve an object of Note
        /// </summary>
        /// <remarks>This will retrieve a Note for them to view their Note and notes</remarks>
        /// <param name="id">id of a Note</param>
        /// <response code="200">Successful return of Note</response>
        /// <response code="400">bad request</response>
        /// <response code="404">could not find this note</response>
        [HttpGet]
        [Route("/note/{id}")]
        [ValidateModelState]
        public async Task<IActionResult> GetNote([FromRoute][Required]Guid id)
        { 
            Note? note = await _dbContext.Notes.FindAsync(id);

            if(note is null)
            {
                return NotFound();
            }

            Patient? patientNotes = await _dbContext.Patients.FindAsync(note.PatientId);
            if(patientNotes is not null) 
            {
                note.Patient = patientNotes;
            }

            return Ok(note);
        }

        /// <summary>
        /// Deletes the Note with the specified ID.
        /// </summary>
        /// <param name="id">id of a Note</param>
        /// <response code="204">Note was deleted.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this Note</response>
        [HttpDelete]
        [Route("/note/{id}")]
        [ValidateModelState]
        public async Task<IActionResult> NoteIdDelete([FromRoute][Required]Guid id)
        { 
            Note? note = await _dbContext.Notes.FindAsync(id);

            if (note is null)
            {
                return NotFound();
            }

            _dbContext.Notes.Remove(note);

            await _dbContext.SaveChangesAsync();

            return Ok();
        }

        /// <summary>
        /// Update a Note
        /// </summary>
        /// <param name="id">id of a Note</param>
        /// <param name="body"></param>
        /// <response code="204">Note was updated.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this Note</response>
        [HttpPut]
        [Route("/note/{id}")]
        [ValidateModelState]
        public async Task<IActionResult> NoteIdPut([FromRoute][Required]Guid id, [FromBody]Note body)
        { 
            Note? note = await _dbContext.Notes.FindAsync(id);

            if (note is null) 
            {
                return NotFound();
            }

            note.Content = body.Content;
            note.Date = body.Date;
            note.PatientId = body.PatientId;

            Patient? patientNotes = await _dbContext.Patients.FindAsync(note.PatientId);
            if(patientNotes is not null)
            {
                note.Patient = patientNotes;
            }


            await _dbContext.SaveChangesAsync();

            return Ok(note);
        }

        /// <summary>
        /// Adds a new Note
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">bad request</response>
        [HttpPost]
        [Route("/note")]
        [ValidateModelState]
        public async Task<IActionResult> NotePost([FromBody]Note body)
        { 
            body.Id = Guid.NewGuid();
            Patient? patientNotes = await _dbContext.Patients.FindAsync(body.PatientId);
            if(patientNotes is not null) 
            {
                body.Patient = patientNotes;
            }

            await _dbContext.Notes.AddAsync(body);
            await _dbContext.SaveChangesAsync();

            return CreatedAtAction(nameof(NotePost), new  {id = body.Id}, body);
        }
    }
}
