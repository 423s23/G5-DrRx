/*
 * DxMood
 *
 * This API will allow our frontend JavaScript files to make API calls to display each individual patients and create results to tie to each patient 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DefaultApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes the doctor with the specified ID.
        /// </summary>
        /// <param name="id">id of doctor</param>
        /// <response code="204">Doctor was deleted.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this doctor</response>
        [HttpDelete]
        [Route("/doctor/{id}")]
        [ValidateModelState]
        public virtual IActionResult DoctorIdDelete([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update a Doctor
        /// </summary>
        /// <param name="id">id of doctor</param>
        /// <param name="body"></param>
        /// <response code="204">Doctor was updated.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this doctor</response>
        [HttpPut]
        [Route("/doctor/{id}")]
        [ValidateModelState]
        public virtual IActionResult DoctorIdPut([FromRoute][Required]string id, [FromBody]Doctor body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a new doctor
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">bad request</response>
        [HttpPost]
        [Route("/doctor")]
        [ValidateModelState]
        public virtual IActionResult DoctorPost([FromBody]Doctor body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieve an object of doctor
        /// </summary>
        /// <remarks>This will retrieve a doctor for them to view their patients</remarks>
        /// <param name="username">username of doctor</param>
        /// <param name="password">password of doctor</param>
        /// <response code="200">Successful return of doctor</response>
        /// <response code="400">bad request</response>
        /// <response code="404">could not find this doctor</response>
        [HttpGet]
        [Route("/doctor/{username}/{password}")]
        [ValidateModelState]
        public virtual IActionResult GetDoctor([FromRoute][Required]string username, [FromRoute][Required]string password)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Doctor));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);       //TODO: Change the data returned
            throw new NotImplementedException();
        }

        /// <summary>
        /// Retrieve an object of patient
        /// </summary>
        /// <remarks>This will retrieve a patient for them to view their result and notes</remarks>
        /// <param name="id">id of a patient</param>
        /// <response code="200">Successful return of patient</response>
        /// <response code="400">bad request</response>
        /// <response code="404">could not find this patient</response>
        [HttpGet]
        [Route("/patient/{id}")]
        [ValidateModelState]
        public virtual IActionResult GetPatient([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Patient));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);
            throw new NotImplementedException();
        }

        /// <summary>
        /// Deletes the patient with the specified ID.
        /// </summary>
        /// <param name="id">id of a patient</param>
        /// <response code="204">Patient was deleted.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this patient</response>
        [HttpDelete]
        [Route("/patient/{id}")]
        [ValidateModelState]
        public virtual IActionResult PatientIdDelete([FromRoute][Required]string id)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Update a Patient
        /// </summary>
        /// <param name="id">id of a patient</param>
        /// <param name="body"></param>
        /// <response code="204">Patient was updated.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this patient</response>
        [HttpPut]
        [Route("/patient/{id}")]
        [ValidateModelState]
        public virtual IActionResult PatientIdPut([FromRoute][Required]string id, [FromBody]Patient body)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404);

            throw new NotImplementedException();
        }

        /// <summary>
        /// Adds a new patient
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">bad request</response>
        [HttpPost]
        [Route("/patient")]
        [ValidateModelState]
        public virtual IActionResult PatientPost([FromBody]Patient body)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            throw new NotImplementedException();
        }
    }
}
