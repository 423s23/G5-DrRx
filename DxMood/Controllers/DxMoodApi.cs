/*
 * DxMood
 *
 * This API will allow our frontend JavaScript files to make API calls to display each individual patients and create results to tie to each patient 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;

using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;
using DxMood.Data;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class DxMoodController : ControllerBase
    { 
        private readonly DxMoodDbContext _dbContext;

        public DxMoodController(DxMoodDbContext dbContext)
        {
            _dbContext = dbContext;
        }
        /// <summary>
        /// Deletes the doctor with the specified ID.
        /// </summary>
        /// <param name="id">id of doctor</param>
        /// <response code="204">Doctor was deleted.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this doctor</response>
        [HttpDelete]
        [Route("/doctor/{id}")]
        [ValidateModelState]
        public async Task<IActionResult> DoctorIdDelete([FromRoute][Required]Guid id)
        { 
            Doctor? doctor = await _dbContext.Doctors.FindAsync(id);

            if (doctor is null)
            {
                return NotFound();
            }

            _dbContext.Doctors.Remove(doctor);

            await _dbContext.SaveChangesAsync();

            return Ok();
        }

        /// <summary>
        /// Update a Doctor
        /// </summary>
        /// <param name="id">id of doctor</param>
        /// <param name="body"></param>
        /// <response code="204">Doctor was updated.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this doctor</response>
        [HttpPut]
        [Route("/doctor/{id}")]
        [ValidateModelState]
        public async Task<IActionResult> DoctorIdPut([FromRoute][Required]Guid id, [FromBody]Doctor body)
        { 
            Doctor? doctor = await _dbContext.Doctors.FindAsync(id);

            if (doctor is null) 
            {
                return NotFound();
            }

            doctor.UserName = body.UserName;
            doctor.Password = body.Password;
            doctor.FirstName = body.FirstName;
            doctor.LastName = body.LastName;
            doctor.Patients = body.Patients;

            await _dbContext.SaveChangesAsync();

            return Ok(doctor);
        }

        /// <summary>
        /// Adds a new doctor
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">bad request</response>
        [HttpPost]
        [Route("/doctor")]
        [ValidateModelState]
        public async Task<IActionResult> DoctorPost([FromBody]Doctor body)
        { 
            body.Id = Guid.NewGuid();
            await _dbContext.Doctors.AddAsync(body);
            await _dbContext.SaveChangesAsync();

            return CreatedAtAction(nameof(GetDoctor), new  {id = body.Id}, body);
        }

        /// <summary>
        /// Retrieve an object of doctor
        /// </summary>
        /// <remarks>This will retrieve a doctor for them to view their patients</remarks>
        /// <param name="username">username of doctor</param>
        /// <param name="password">password of doctor</param>
        /// <response code="200">Successful return of doctor</response>
        /// <response code="400">bad request</response>
        /// <response code="404">could not find this doctor</response>
        [HttpGet]
        [Route("/doctor/{username}/{password}")]
        [ValidateModelState]
        public async Task<IActionResult> GetDoctor([FromRoute][Required]string username, [FromRoute][Required]string password)
        { 
            Doctor? doctor = await _dbContext.Doctors.FindAsync(username, password);

            if(doctor is null)
            {
                return NotFound();
            }

            return Ok(doctor);
        }

        /// <summary>
        /// Retrieve an object of patient
        /// </summary>
        /// <remarks>This will retrieve a patient for them to view their result and notes</remarks>
        /// <param name="id">id of a patient</param>
        /// <response code="200">Successful return of patient</response>
        /// <response code="400">bad request</response>
        /// <response code="404">could not find this patient</response>
        [HttpGet]
        [Route("/patient/{id}")]
        [ValidateModelState]
        public async Task<IActionResult> GetPatient([FromRoute][Required]Guid id)
        { 
            Patient? patient = await _dbContext.Patients.FindAsync(id);

            if(patient is null)
            {
                return NotFound();
            }

            return Ok(patient);
        }

        /// <summary>
        /// Deletes the patient with the specified ID.
        /// </summary>
        /// <param name="id">id of a patient</param>
        /// <response code="204">Patient was deleted.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this patient</response>
        [HttpDelete]
        [Route("/patient/{id}")]
        [ValidateModelState]
        public async Task<IActionResult> PatientIdDelete([FromRoute][Required]Guid id)
        { 
            Patient? patient = await _dbContext.Patients.FindAsync(id);

            if (patient is null)
            {
                return NotFound();
            }

            _dbContext.Patients.Remove(patient);

            await _dbContext.SaveChangesAsync();

            return Ok();
        }

        /// <summary>
        /// Update a Patient
        /// </summary>
        /// <param name="id">id of a patient</param>
        /// <param name="body"></param>
        /// <response code="204">Patient was updated.</response>
        /// <response code="400">bad request</response>
        /// <response code="404">Could not find this patient</response>
        [HttpPut]
        [Route("/patient/{id}")]
        [ValidateModelState]
        public async Task<IActionResult> PatientIdPut([FromRoute][Required]Guid id, [FromBody]Patient body)
        { 
            Patient? patient = await _dbContext.Patients.FindAsync(id);

            if (patient is null) 
            {
                return NotFound();
            }

            patient.FirstName = body.FirstName;
            patient.DateOfBirth = body.DateOfBirth;
            patient.LastName = body.LastName;
            patient.Results = body.Results;
            patient.Notes = body.Notes;

            await _dbContext.SaveChangesAsync();

            return Ok(patient);
        }

        /// <summary>
        /// Adds a new patient
        /// </summary>
        /// <param name="body"></param>
        /// <response code="200">OK</response>
        /// <response code="400">bad request</response>
        [HttpPost]
        [Route("/patient")]
        [ValidateModelState]
        public async Task<IActionResult> PatientPost([FromBody]Patient body)
        { 
            body.Id = Guid.NewGuid();
            await _dbContext.Patients.AddAsync(body);
            await _dbContext.SaveChangesAsync();

            return CreatedAtAction(nameof(GetPatient), new  {id = body.Id}, body);
        }
    }
}
