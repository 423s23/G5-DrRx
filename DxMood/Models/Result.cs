/*
 * DxMood
 *
 * This API will allow our frontend JavaScript files to make API calls to display each individual patients and create results to tie to each patient 
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Result : IEquatable<Result>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public Guid Id { get; set; }

        /// <summary>
        /// Gets or Sets Phq9
        /// </summary>

        [DataMember(Name="phq9")]
        public int Phq9 { get; set; }

        /// <summary>
        /// Gets or Sets Gad7
        /// </summary>

        [DataMember(Name="gad7")]
        public int Gad7 { get; set; }

        /// <summary>
        /// Gets or Sets Isi
        /// </summary>

        [DataMember(Name="isi")]
        public int Isi { get; set; }

        /// <summary>
        /// Gets or Sets ASRS
        /// </summary>

        [DataMember(Name="ASRS")]
        public int ASRS { get; set; }

        /// <summary>
        /// Gets or Sets Diagnosis
        /// </summary>

        [DataMember(Name="diagnosis")]
        public string Diagnosis { get; set; }

        /// <summary>
        /// Gets or Sets RecommendedMedication
        /// </summary>

        [DataMember(Name="recommendedMedication")]
        public string RecommendedMedication { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>

        [DataMember(Name="note")]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>

        [DataMember(Name="date")]
        public string Date { get; set; }

        /// <summary>
        /// Gets or Sets PatientId
        /// </summary>

        [DataMember(Name="patientId")]
        public Guid PatientId { get; set; }

        /// <summary>
        /// Gets or Sets Patient
        /// </summary>

        [DataMember(Name="patient")]
        public virtual Patient Patient { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Result {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Phq9: ").Append(Phq9).Append("\n");
            sb.Append("  Gad7: ").Append(Gad7).Append("\n");
            sb.Append("  Isi: ").Append(Isi).Append("\n");
            sb.Append("  ASRS: ").Append(ASRS).Append("\n");
            sb.Append("  Diagnosis: ").Append(Diagnosis).Append("\n");
            sb.Append("  RecommendedMedication: ").Append(RecommendedMedication).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  PatientId: ").Append(PatientId).Append("\n");
            sb.Append("  Patient: ").Append(Patient).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Result)obj);
        }

        /// <summary>
        /// Returns true if Result instances are equal
        /// </summary>
        /// <param name="other">Instance of Result to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Result other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Phq9 == other.Phq9 ||
                    Phq9 != null &&
                    Phq9.Equals(other.Phq9)
                ) && 
                (
                    Gad7 == other.Gad7 ||
                    Gad7 != null &&
                    Gad7.Equals(other.Gad7)
                ) && 
                (
                    Isi == other.Isi ||
                    Isi != null &&
                    Isi.Equals(other.Isi)
                ) && 
                (
                    ASRS == other.ASRS ||
                    ASRS != null &&
                    ASRS.Equals(other.ASRS)
                ) && 
                (
                    Diagnosis == other.Diagnosis ||
                    Diagnosis != null &&
                    Diagnosis.Equals(other.Diagnosis)
                ) && 
                (
                    RecommendedMedication == other.RecommendedMedication ||
                    RecommendedMedication != null &&
                    RecommendedMedication.Equals(other.RecommendedMedication)
                ) && 
                (
                    Note == other.Note ||
                    Note != null &&
                    Note.Equals(other.Note)
                ) && 
                (
                    PatientId == other.PatientId ||
                    PatientId != null &&
                    PatientId.Equals(other.PatientId)
                ) && 
                (
                    Patient == other.Patient ||
                    Patient != null &&
                    Patient.Equals(other.Patient)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Phq9 != null)
                    hashCode = hashCode * 59 + Phq9.GetHashCode();
                    if (Gad7 != null)
                    hashCode = hashCode * 59 + Gad7.GetHashCode();
                    if (Isi != null)
                    hashCode = hashCode * 59 + Isi.GetHashCode();
                    if (ASRS != null)
                    hashCode = hashCode * 59 + ASRS.GetHashCode();
                    if (Diagnosis != null)
                    hashCode = hashCode * 59 + Diagnosis.GetHashCode();
                    if (RecommendedMedication != null)
                    hashCode = hashCode * 59 + RecommendedMedication.GetHashCode();
                    if (Note != null)
                    hashCode = hashCode * 59 + Note.GetHashCode();
                    if (PatientId != null)
                    hashCode = hashCode * 59 + PatientId.GetHashCode();
                    if (Patient != null)
                    hashCode = hashCode * 59 + Patient.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Result left, Result right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Result left, Result right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
